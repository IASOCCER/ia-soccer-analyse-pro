import streamlit as st
import pandas as pd

st.set_page_config(page_title="IA Soccer Analyse Pro", layout="wide")
st.title("‚öΩ IA Soccer ‚Äì Analyse Technique des Joueurs")

# Menu principal
menu = st.sidebar.selectbox("Choisissez un test :", ["Test de passe", "Conduite de balle ‚Äì Zigzag", "Conduite de balle ‚Äì Ligne droite"])

# Initialiser les donn√©es
if "tests" not in st.session_state:
    st.session_state["tests"] = []

# Formulaire joueur (utilis√© dans tous les tests)
st.sidebar.markdown("### Informations du joueur")
nom = st.sidebar.text_input("Nom du joueur")
age = st.sidebar.number_input("√Çge", min_value=8, max_value=18, step=1)

# === TEST DE PASSE ===
if menu == "Test de passe":
    st.header("üéØ Test de Passe avec IA")

    pied = st.selectbox("Pied utilis√©", ["Pied gauche", "Pied droit"])
    pression = st.selectbox("Niveau de pression", ["Faible (12s)", "Moyenne (6s)", "√âlev√©e (3s)"])
    nb_acertes = st.slider("Nombre de passes r√©ussies sur 6", 0, 6, 3)

    temps_reactions = []
    if nb_acertes > 0:
        st.markdown("Saisir les temps de r√©action (en secondes) pour chaque passe r√©ussie :")
        for i in range(1, nb_acertes + 1):
            t = st.number_input(f"Temps pour la passe {i}", min_value=0.0, max_value=15.0, step=0.1, key=f"passe_{i}")
            temps_reactions.append(t)

    if st.button("‚ûï Ajouter ce test"):
        if nom and age:
            precision = round((nb_acertes / 6) * 100, 1)
            temps_moyen = round(sum(temps_reactions) / len(temps_reactions), 2) if nb_acertes > 0 else 0.0

            st.session_state["tests"].append({
                "Nom": nom,
                "√Çge": age,
                "Test": "Passe",
                "Pied": pied,
                "Pression": pression,
                "Pr√©cision (%)": precision,
                "Temps moyen (s)": temps_moyen
            })
            st.success("‚úÖ Test de passe ajout√© avec succ√®s!")
        else:
            st.warning("Veuillez remplir toutes les informations pour ajouter le test.")

# === CONDUITE DE BALLE ‚Äì ZIGZAG ===
elif menu == "Conduite de balle ‚Äì Zigzag":
    st.header("üîÄ Test de Conduite de Balle ‚Äì Zigzag")
    distance = st.selectbox("Distance totale", ["15 m√®tres", "20 m√®tres"])
    temps = st.number_input("Temps r√©alis√© (en secondes)", min_value=0.0, max_value=30.0, step=0.1)

    if st.button("‚ûï Ajouter ce test zigzag"):
        if nom and age:
            st.session_state["tests"].append({
                "Nom": nom,
                "√Çge": age,
                "Test": "Conduite Zigzag",
                "Distance": distance,
                "Temps (s)": temps
            })
            st.success("‚úÖ Test ajout√© avec succ√®s!")
        else:
            st.warning("Veuillez remplir toutes les informations pour ajouter le test.")

# === CONDUITE DE BALLE ‚Äì LIGNE DROITE ===
elif menu == "Conduite de balle ‚Äì Ligne droite":
    st.header("üìè Test de Conduite de Balle ‚Äì Ligne Droite")
    distance_ld = st.selectbox("Distance totale", ["10 m√®tres", "15 m√®tres"])
    temps_ld = st.number_input("Temps r√©alis√© (en secondes)", min_value=0.0, max_value=20.0, step=0.1, key="ligne_droite")

    if st.button("‚ûï Ajouter ce test ligne droite"):
        if nom and age:
            st.session_state["tests"].append({
                "Nom": nom,
                "√Çge": age,
                "Test": "Conduite Ligne Droite",
                "Distance": distance_ld,
                "Temps (s)": temps_ld
            })
            st.success("‚úÖ Test ajout√© avec succ√®s!")
        else:
            st.warning("Veuillez remplir toutes les informations pour ajouter le test.")

# === AFFICHAGE DES TESTS ===
if st.session_state["tests"]:
    st.markdown("### üìä Tous les tests enregistr√©s")
    df = pd.DataFrame(st.session_state["tests"])
    st.dataframe(df, use_container_width=True)

    if st.button("üìÑ G√©n√©rer les rapports"):
        st.markdown(f"### üìå Rapport pour {nom}, {age} ans")

        # Rapport ‚Äì Test de passe
        df_passe = df[df["Test"] == "Passe"]
        if not df_passe.empty:
            for pied_type in ["Pied gauche", "Pied droit"]:
                sous_df = df_passe[df_passe["Pied"] == pied_type]
                if not sous_df.empty:
                    st.markdown(f"#### ü¶∂ Passe ‚Äì {pied_type}")
                    st.dataframe(sous_df[["Pression", "Pr√©cision (%)", "Temps moyen (s)"]])

                    precision_moy = sous_df["Pr√©cision (%)"].mean()
                    temps_moy = sous_df["Temps moyen (s)"].mean()

                    st.markdown(f"- **Pr√©cision moyenne :** {precision_moy:.1f}%")
                    st.markdown(f"- **Temps moyen de r√©action :** {temps_moy:.2f} s")

                    st.markdown("### üß† Analyse automatique")
                    if precision_moy >= 70:
                        st.markdown("- ‚úÖ **Pr√©cision √©lev√©e** ‚Äì bon contr√¥le.")
                    elif 50 <= precision_moy < 70:
                        st.markdown("- ‚ö†Ô∏è **Pr√©cision moyenne** ‚Äì am√©lioration possible.")
                    else:
                        st.markdown("- ‚ùå **Faible pr√©cision** ‚Äì travailler la r√©gularit√© et la concentration.")

                    if temps_moy < 4:
                        st.markdown("- ‚úÖ **R√©action rapide** ‚Äì excellente lecture du stimulus.")
                    elif 4 <= temps_moy <= 6:
                        st.markdown("- ‚ö†Ô∏è **R√©action mod√©r√©e** ‚Äì √† am√©liorer.")
                    else:
                        st.markdown("- ‚ùå **R√©action lente** ‚Äì s'entra√Æner sous pression r√©elle.")

        # Rapport ‚Äì Conduite de balle (zigzag et ligne droite)
        for test_type in ["Conduite Zigzag", "Conduite Ligne Droite"]:
            df_cond = df[df["Test"] == test_type]
            if not df_cond.empty:
                st.markdown(f"#### üöÄ {test_type}")
                st.dataframe(df_cond[["Distance", "Temps (s)"]])

                temps_moyen = df_cond["Temps (s)"].mean()
                st.markdown(f"- **Temps moyen :** {temps_moyen:.2f} s")

                st.markdown("### üß† Analyse automatique")
                if temps_moyen <= 6:
                    st.markdown("- ‚úÖ **Tr√®s rapide** ‚Äì excellente ma√Ætrise.")
                elif 6 < temps_moyen <= 8:
                    st.markdown("- ‚ö†Ô∏è **Temps mod√©r√©** ‚Äì bonne base, √† optimiser.")
                else:
                    st.markdown("- ‚ùå **Temps √©lev√©** ‚Äì besoin de travail technique et coordination.")

                st.markdown("### üéØ Plan d'action recommand√©")
                if temps_moyen > 8:
                    st.markdown("""
#### üü• Niveau Prioritaire

**Objectif :** Am√©liorer la vitesse et le contr√¥le de balle.  
**Exercices :**
- Conduite balle proche en zigzag
- Slalom rapide chronom√©tr√©
- Jeux r√©duits avec transitions
                    """)
                elif 6 < temps_moyen <= 8:
                    st.markdown("""
#### üü® Niveau Mod√©r√©

**Objectif :** Optimiser l'efficacit√© technique.  
**Exercices :**
- Conduite sur 15m avec obstacles
- Travail en duo avec pression
- Changement de rythme avec ballon
                    """)
                else:
                    st.markdown("""
#### üü© Niveau Avanc√©

**Objectif :** Transfert vers match r√©el.  
**Exercices :**
- Jeu libre avec touche limit√©e
- Conduite + passe d√©cisive
- Vid√©o feedback
                    """)


    if st.button("‚ûï Ajouter ce test", key="ajouter_circuit"):
        st.success(f"Test enregistr√©: {nom}, {age} ans, {temps}s")


