import streamlit as st
import pandas as pd
from datetime import datetime
from openai import OpenAI

# CLIENTE OPENAI
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# CONFIGURA√á√ÉO GERAL
st.set_page_config(page_title="IA Soccer Analyse Pro", layout="wide")
st.sidebar.image("https://iasoccer.com/wp-content/uploads/2024/09/IA-SOCCER-FC-PORTO-WHITE.png", width=250)
st.sidebar.title("IA Soccer Analyse Pro")

# MENU LATERAL
page = st.sidebar.selectbox("Choisissez une section :", [
    "üè† Accueil",
    "üßç Joueur",
    "üéØ Passe",
    "üõû Conduite",
    "‚öΩ Remate",
    "üèÉ‚Äç‚ôÇÔ∏è Sprint",
    "üöÄ Agilit√©",
    "üí™ Masse musculaire",
    "üìä Rapport Global"
])

# DADOS DO JOGADOR
if "joueur" not in st.session_state:
    st.session_state["joueur"] = {}

# FUN√á√ÉO GERAL DE VERIFICA√á√ÉO
def verifier_joueur():
    if not st.session_state["joueur"]:
        st.warning("Veuillez d'abord remplir les informations du joueur dans l'onglet üßç Joueur.")
        st.stop()
# ACCUEIL
if page == "üè† Accueil":
    st.title("Bienvenue √† IA Soccer Analyse Pro ‚öΩ")
    st.markdown("Cette plateforme permet d'√©valuer la performance technique et physique des joueurs de 8 √† 18 ans.")
    st.info("üß† Chaque test utilise l'intelligence artificielle pour g√©n√©rer une analyse et un plan d'action professionnel.")

# CADASTRO DO JOGADOR
elif page == "üßç Joueur":
    st.title("üßç Informations du Joueur")
    nom = st.text_input("Nom complet")
    age = st.number_input("√Çge", min_value=8, max_value=18)
    if st.button("‚úÖ Enregistrer"):
        st.session_state["joueur"] = {"nom": nom, "√¢ge": age}
        st.success("Informations du joueur enregistr√©es.")
elif page == "üéØ Passe":
    verifier_joueur()
    st.title("üéØ Analyse du Passe ‚Äì IA Soccer")

    if "tests_passe" not in st.session_state:
        st.session_state["tests_passe"] = []

    pied = st.selectbox("Pied utilis√©", ["Pied gauche", "Pied droit"])
    pression = st.selectbox("Niveau de pression", ["Faible (12s)", "Moyenne (6s)", "√âlev√©e (3s)"])
    nb_acertes = st.slider("Passes r√©ussies sur 6", 0, 6, 3)

    temps_reactions = []
    if nb_acertes > 0:
        st.markdown("Temps de r√©action pour chaque passe r√©ussie :")
        for i in range(1, nb_acertes + 1):
            t = st.number_input(f"Temps passe {i}", 0.0, 15.0, step=0.1, key=f"passe_{i}")
            temps_reactions.append(t)

    if st.button("‚ûï Ajouter ce test de passe"):
        precision = round((nb_acertes / 6) * 100, 1)
        temps_moyen = round(sum(temps_reactions) / len(temps_reactions), 2) if nb_acertes > 0 else 0.0

        test = {
            "Nom": st.session_state["joueur"]["nom"],
            "√Çge": st.session_state["joueur"]["√¢ge"],
            "Pied": pied,
            "Pression": pression,
            "Pr√©cision (%)": precision,
            "Temps moyen (s)": temps_moyen
        }
        st.session_state["tests_passe"].append(test)
        st.success("‚úÖ Test ajout√© avec succ√®s.")

    if st.session_state["tests_passe"]:
        st.markdown("### üìä R√©sultats enregistr√©s")
        df = pd.DataFrame(st.session_state["tests_passe"])
        st.dataframe(df, use_container_width=True)

        if st.button("üìÑ Rapport IA"):
            pied_types = ["Pied gauche", "Pied droit"]
            for pied_type in pied_types:
                sous_df = df[df["Pied"] == pied_type]
                if not sous_df.empty:
                    st.markdown(f"#### ü¶∂ {pied_type}")
                    st.dataframe(sous_df[["Pression", "Pr√©cision (%)", "Temps moyen (s)"]])

                    precision_moy = sous_df["Pr√©cision (%)"].mean()
                    temps_moy = sous_df["Temps moyen (s)"].mean()

                    st.markdown(f"- **Pr√©cision moyenne :** {precision_moy:.1f}%")
                    st.markdown(f"- **Temps moyen :** {temps_moy:.2f} s")

                    st.markdown("### üß† Analyse automatique")
                    if precision_moy >= 70:
                        st.success("- ‚úÖ Pr√©cision √©lev√©e ‚Äì bon contr√¥le.")
                    elif 50 <= precision_moy < 70:
                        st.warning("- ‚ö†Ô∏è Pr√©cision moyenne ‚Äì am√©lioration possible.")
                    else:
                        st.error("- ‚ùå Faible pr√©cision ‚Äì √† travailler.")

                    if temps_moy < 4:
                        st.success("- ‚úÖ R√©action rapide ‚Äì tr√®s bon.")
                    elif 4 <= temps_moy <= 6:
                        st.warning("- ‚ö†Ô∏è R√©action moyenne.")
                    else:
                        st.error("- ‚ùå R√©action lente ‚Äì s'entra√Æner sous pression.")

                    st.markdown("### üéØ Plan d'action recommand√©")
                    if precision_moy < 60 or temps_moy > 6:
                        st.markdown("- **Objectif :** R√©duire le temps de r√©action et am√©liorer la pr√©cision.")
                    elif 60 <= precision_moy < 70 or 4 <= temps_moy <= 6:
                        st.markdown("- **Objectif :** Consolider la r√©gularit√© sous pression.")
                    else:
                        st.markdown("- **Objectif :** Transf√©rer la qualit√© de passe au match r√©el.")
elif page == "üõû Conduite":
    verifier_joueur()
    st.title("üõû Analyse de la Conduite de Balle")

    if "conduite_tests" not in st.session_state:
        st.session_state["conduite_tests"] = []

    parcours = st.selectbox("Type de parcours", [
        "Zig-Zag (6 c√¥nes, 15m)", "Changements de Direction (3 virages, 12m)"
    ])
    temps = st.number_input("‚è±Ô∏è Temps (secondes)", min_value=0.0, step=0.1)
    perte_controle = False
    if parcours.startswith("Changements"):
        perte_controle = st.radio("‚ùå Perte de contr√¥le de la balle ?", ["Non", "Oui"]) == "Oui"

    # N√≠veis por idade
    zigzag_ref = {
        8: 11.5, 9: 11.0, 10: 10.5, 11: 10.0, 12: 9.6, 13: 9.2,
        14: 8.9, 15: 8.6, 16: 8.4, 17: 8.2, 18: 8.0
    }

    change_ref = {
        8: {"moyen": 16, "excellent": 14, "faible": 20},
        9: {"moyen": 15, "excellent": 13, "faible": 19},
        10: {"moyen": 14, "excellent": 12, "faible": 18},
        11: {"moyen": 13, "excellent": 11, "faible": 17},
        12: {"moyen": 12, "excellent": 10, "faible": 16},
        13: {"moyen": 11, "excellent": 9, "faible": 15},
        14: {"moyen": 10.5, "excellent": 8.5, "faible": 14.5},
        15: {"moyen": 10, "excellent": 8, "faible": 14},
        16: {"moyen": 9.5, "excellent": 7.5, "faible": 13.5},
        17: {"moyen": 9, "excellent": 7, "faible": 13},
        18: {"moyen": 9, "excellent": 7, "faible": 13}
    }

    def analyser_niveau(age, temps, parcours):
        if parcours.startswith("Zig-Zag"):
            ref = zigzag_ref.get(age, 10.0)
            if temps <= ref - 1.0:
                return "Excellent"
            elif temps <= ref + 1.0:
                return "Bon"
            elif temps <= ref + 3.0:
                return "R√©gulier"
            else:
                return "Faible"
        else:
            ref = change_ref.get(age, {"moyen": 12, "excellent": 10, "faible": 16})
            if temps <= ref["excellent"]:
                return "Excellent"
            elif temps >= ref["faible"]:
                return "Faible"
            elif temps <= ref["moyen"]:
                return "Bon"
            else:
                return "R√©gulier"

    def generer_plan_ia(nom, age, parcours, temps, perte_controle, niveau):
        prompt = f"""
Le joueur s'appelle {nom}, {age} ans.
Exercice : {parcours}
Temps : {temps} s ‚Äî Niveau √©valu√© : {niveau}
Perte de contr√¥le : {"Oui" if perte_controle else "Non"}

Agis comme un entra√Æneur de haut niveau.
Cr√©e un plan d'action personnalis√© selon le niveau, l'√¢ge et le type de parcours.
Inclue :
- Un commentaire technique
- 2 exercices recommand√©s
- Plan sur 7 jours
- Conseils d'am√©lioration

R√©ponds en 5 lignes maximum.
"""
        try:
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=500,
                temperature=0.7
            )
            return response.choices[0].message.content.strip()
        except Exception as e:
            return f"‚ùå Erreur lors de l'appel √† l'IA : {str(e)}"

    if st.button("‚ûï Ajouter ce test de conduite"):
        age = st.session_state["joueur"]["√¢ge"]
        nom = st.session_state["joueur"]["nom"]
        niveau = analyser_niveau(age, temps, parcours)
        analyse = generer_plan_ia(nom, age, parcours, temps, perte_controle, niveau)

        st.session_state["conduite_tests"].append({
            "Nom": nom,
            "√Çge": age,
            "Parcours": parcours,
            "Temps (s)": temps,
            "Perte de Contr√¥le": "Oui" if perte_controle else "Non",
            "Niveau": niveau,
            "Analyse IA": analyse
        })
        st.success(f"‚úÖ Test ajout√© avec succ√®s. Niveau: {niveau}")
        st.markdown(f"### üß† Analyse IA\n\n{analyse}")

    if st.session_state["conduite_tests"]:
        st.markdown("### üìã R√©sultats enregistr√©s")
        df = pd.DataFrame(st.session_state["conduite_tests"])
        st.dataframe(df, use_container_width=True)
elif page == "‚öΩ Remate":
    verifier_joueur()
    st.title("‚öΩ Analyse du Remate Technique avec IA")

    if "tests_remate" not in st.session_state:
        st.session_state["tests_remate"] = []

    nom = st.session_state["joueur"]["nom"]
    age = st.session_state["joueur"]["√¢ge"]

    # üéØ Pied droit
    st.markdown("### ü¶µ Pied Droit")
    precision_d = st.slider("üéØ Pr√©cision (sur 10 tirs)", 0, 10, 0, key="precision_d")
    vitesses_d = [st.number_input(f"Vitesse Tir {i+1} (km/h)", 0.0, 200.0, step=0.1, key=f"v_d{i}") for i in range(10)]
    vitesse_d_moy = round(sum(vitesses_d) / 10, 2)

    # üéØ Pied gauche
    st.markdown("### ü¶µ Pied Gauche")
    precision_g = st.slider("üéØ Pr√©cision (sur 10 tirs)", 0, 10, 0, key="precision_g")
    vitesses_g = [st.number_input(f"Vitesse Tir {i+1} (km/h)", 0.0, 200.0, step=0.1, key=f"v_g{i}") for i in range(10)]
    vitesse_g_moy = round(sum(vitesses_g) / 10, 2)

    # Refer√™ncia por idade
    base_ref = {
        10: {"precision": 50, "vitesse": 45},
        11: {"precision": 55, "vitesse": 50},
        12: {"precision": 60, "vitesse": 55},
        13: {"precision": 65, "vitesse": 60},
        14: {"precision": 70, "vitesse": 65},
        15: {"precision": 75, "vitesse": 70},
        16: {"precision": 80, "vitesse": 75},
        17: {"precision": 85, "vitesse": 80},
        18: {"precision": 90, "vitesse": 85},
    }

    def generer_analyse_remate(nom, age, precision_d, precision_g, vitesse_d, vitesse_g):
        ref = base_ref.get(age, {"precision": 65, "vitesse": 60})
        precision_moy = (precision_d + precision_g) / 2
        vitesse_moy = (vitesse_d + vitesse_g) / 2
        ecart_precision = round(precision_moy - ref["precision"], 1)
        ecart_vitesse = round(vitesse_moy - ref["vitesse"], 1)

        comparaison = f"""
### üìà Comparaison avec les standards pour {age} ans :
- Pr√©cision moyenne : {precision_moy:.1f}% (√©cart de {ecart_precision:+.1f}%)
- Vitesse moyenne : {vitesse_moy:.1f} km/h (√©cart de {ecart_vitesse:+.1f} km/h)
"""

        prompt = f"""
{comparaison}

Fais une analyse technique compl√®te des tirs de ce joueur ({nom}, {age} ans).
Puis, propose un plan d'action personnalis√© avec 3 √† 5 conseils concrets pour am√©liorer sa puissance, sa pr√©cision et sa posture.
"""

        try:
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "Tu es un entra√Æneur professionnel sp√©cialis√© en analyse technique du football."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=700,
                temperature=0.7
            )
            return comparaison + "\n" + response.choices[0].message.content
        except Exception as e:
            if "authentication" in str(e).lower():
                return "‚ùå Erreur d'authentification ‚Äì v√©rifie ta cl√© API OpenAI."
            return f"‚ùå Une erreur est survenue : {e}"

    if st.button("‚úÖ Ajouter ce test"):
        analyse = generer_analyse_remate(
            nom, age,
            precision_d * 10, precision_g * 10,
            vitesse_d_moy, vitesse_g_moy
        )

        test = {
            "Nom": nom,
            "√Çge": age,
            "Pr√©cision Droit (%)": precision_d * 10,
            "Pr√©cision Gauche (%)": precision_g * 10,
            "Vitesse Moy. Droit (km/h)": vitesse_d_moy,
            "Vitesse Moy. Gauche (km/h)": vitesse_g_moy,
            "Analyse IA": analyse
        }

        st.session_state["tests_remate"].append(test)
        st.success("‚úÖ Test enregistr√© avec succ√®s !")

    if st.session_state["tests_remate"]:
        st.markdown("### üìä R√©sultat du dernier test")
        dernier = st.session_state["tests_remate"][-1]
        st.dataframe(pd.DataFrame([dernier]))

        st.markdown("### üß† Analyse IA")
        st.markdown(dernier["Analyse IA"])
elif page == "üèÉ‚Äç‚ôÇÔ∏è Sprint":
    verifier_joueur()
    st.title("üèÉ‚Äç‚ôÇÔ∏è Analyse du Sprint ‚Äì IA Soccer")

    if "sprint_tests" not in st.session_state:
        st.session_state["sprint_tests"] = []

    nom = st.session_state["joueur"]["nom"]
    age = st.session_state["joueur"]["√¢ge"]

    type_sprint = st.selectbox("Type de sprint", ["Sprint 10m", "Sprint 20m"])
    temps = st.number_input("Temps r√©alis√© (secondes)", min_value=0.0, step=0.01)

    def get_reference(age, type_sprint):
        if type_sprint == "Sprint 10m":
            if age <= 10: return {"excellent": 2.2, "bon": 2.7}
            elif age <= 12: return {"excellent": 2.0, "bon": 2.5}
            elif age <= 14: return {"excellent": 1.9, "bon": 2.4}
            elif age <= 16: return {"excellent": 1.8, "bon": 2.3}
            else: return {"excellent": 1.7, "bon": 2.2}
        else:
            if age <= 10: return {"excellent": 4.2, "bon": 4.8}
            elif age <= 12: return {"excellent": 4.0, "bon": 4.6}
            elif age <= 14: return {"excellent": 3.8, "bon": 4.4}
            elif age <= 16: return {"excellent": 3.6, "bon": 4.2}
            else: return {"excellent": 3.4, "bon": 4.0}

    def evaluer_sprint(age, type_sprint, temps):
        ref = get_reference(age, type_sprint)
        note = 100
        if temps <= ref["excellent"]:
            niveau = "Excellent"
        elif temps <= ref["bon"]:
            note -= 15
            niveau = "Bon"
        else:
            note -= 30
            niveau = "√Ä am√©liorer"
        return niveau, note, ref

    def generer_analyse_sprint(age, type_sprint, temps, niveau):
        prompt = f"""
Un joueur de {age} ans a effectu√© un test de sprint de type '{type_sprint}' et a r√©alis√© un temps de {temps:.2f} secondes. 
Niveau √©valu√© : {niveau}.

1. Fournis une √©valuation professionnelle en fran√ßais.
2. Donne une explication sur sa performance selon l'√¢ge et la distance.
3. Propose un plan d'action clair et personnalis√© pour am√©liorer son sprint.

Sois concis, structur√© et professionnel.
"""
        try:
            response = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "Tu es un coach de football sp√©cialis√© en performance physique."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=500
            )
            return response.choices[0].message.content
        except Exception as e:
            return f"‚ùå Erreur IA : {str(e)}"

    if st.button("‚ûï Ajouter ce test de sprint"):
        niveau, note, ref = evaluer_sprint(age, type_sprint, temps)
        analyse = generer_analyse_sprint(age, type_sprint, temps, niveau)
        test = {
            "nom": nom,
            "√¢ge": age,
            "type": type_sprint,
            "temps": temps,
            "niveau": niveau,
            "note": note,
            "r√©f": ref,
            "analyse": analyse,
            "date": datetime.now().strftime("%d/%m/%Y %H:%M")
        }
        st.session_state["sprint_tests"].append(test)
        st.success("‚úÖ Test ajout√© avec succ√®s.")

    if st.session_state["sprint_tests"]:
        st.markdown("### üìä Tests enregistr√©s")
        for i, t in enumerate(st.session_state["sprint_tests"]):
            st.write(f"**Test {i+1} ‚Äì {t['date']}**")
            st.write(f"üë§ {t['nom']} | √Çge: {t['√¢ge']} | Type: {t['type']}")
            st.write(f"‚è±Ô∏è Temps: {t['temps']} s | R√©f√©rence: Excellent ‚â§ {t['r√©f']['excellent']}s / Bon ‚â§ {t['r√©f']['bon']}s")
            st.write(f"üìà Note: {t['note']} /100 ‚Äì Niveau: **{t['niveau']}**")
            st.markdown(f"üß† **Analyse IA** :\n\n{t['analyse']}")
            st.markdown("---")
elif page == "üí™ Masse musculaire":
    verifier_joueur()
    st.title("üí™ √âvaluation de la Masse Musculaire ‚Äì IA Soccer")

    if "muscle_tests" not in st.session_state:
        st.session_state["muscle_tests"] = []

    nom = st.session_state["joueur"]["nom"]
    age = st.session_state["joueur"]["√¢ge"]

    poids = st.number_input("‚öñÔ∏è Poids total (kg)", min_value=10.0, step=0.1)
    masse_musculaire = st.number_input("üí™ Masse musculaire (kg)", min_value=5.0, step=0.1)

    def get_reference_muscle(age):
        if age <= 10:
            return {"excellent": 20, "bon": 16}
        elif age <= 12:
            return {"excellent": 25, "bon": 20}
        elif age <= 14:
            return {"excellent": 30, "bon": 25}
        elif age <= 16:
            return {"excellent": 35, "bon": 30}
        else:
            return {"excellent": 40, "bon": 34}

    def evaluer_muscle(age, masse):
        ref = get_reference_muscle(age)
        note = 100
        if masse >= ref["excellent"]:
            niveau = "Excellent"
        elif masse >= ref["bon"]:
            note -= 15
            niveau = "Bon"
        else:
            note -= 30
            niveau = "√Ä am√©liorer"
        return niveau, note, ref

    def generer_analyse_muscle(nom, age, poids, masse, niveau):
        pourcentage = (masse / poids) * 100
        prompt = f"""
Le joueur {nom}, √¢g√© de {age} ans, a √©t√© √©valu√© avec une masse musculaire de {masse:.1f} kg sur un poids total de {poids:.1f} kg, soit environ {pourcentage:.1f}% de masse musculaire. Son niveau a √©t√© class√© : {niveau}.

Fournis une analyse professionnelle de sa composition corporelle et un plan d'action personnalis√© pour am√©liorer sa masse musculaire et sa condition physique. Inclure si pertinent des suggestions nutritionnelles et de renforcement musculaire.

R√©ponds en fran√ßais de fa√ßon structur√©e, claire et adapt√©e √† son √¢ge.
"""
        try:
            response = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "Tu es un pr√©parateur physique expert en jeunes athl√®tes de football."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=500
            )
            return response.choices[0].message.content
        except Exception as e:
            return f"‚ùå Erreur IA : {str(e)}"

    if st.button("‚ûï Ajouter ce test"):
        niveau, note, ref = evaluer_muscle(age, masse_musculaire)
        analyse = generer_analyse_muscle(nom, age, poids, masse_musculaire, niveau)
        test = {
            "nom": nom,
            "√¢ge": age,
            "poids": poids,
            "masse_musculaire": masse_musculaire,
            "niveau": niveau,
            "note": note,
            "r√©f": ref,
            "analyse": analyse,
            "date": datetime.now().strftime("%d/%m/%Y %H:%M")
        }
        st.session_state["muscle_tests"].append(test)
        st.success("‚úÖ Test ajout√© avec succ√®s.")

    if st.session_state["muscle_tests"]:
        st.markdown("### üìä Tests enregistr√©s")
        for i, t in enumerate(st.session_state["muscle_tests"]):
            pourcent = (t['masse_musculaire'] / t['poids']) * 100
            st.write(f"**Test {i+1} ‚Äì {t['date']}**")
            st.write(f"üë§ {t['nom']} | √Çge: {t['√¢ge']}")
            st.write(f"‚öñÔ∏è Masse musculaire: {t['masse_musculaire']} kg / {t['poids']} kg ({pourcent:.1f}%)")
            st.write(f"üìà Note: {t['note']} /100 ‚Äì Niveau: **{t['niveau']}**")
            st.markdown(f"üß† **Analyse IA** :\n\n{t['analyse']}")
            st.markdown("---")
elif page == "üìä Rapport Global":
    verifier_joueur()
    st.title("üìä Rapport Global du Joueur")

    nom = st.session_state["joueur"]["nom"]
    age = st.session_state["joueur"]["√¢ge"]

    st.markdown(f"### üë§ Joueur : **{nom}** ‚Äì √Çge : **{age} ans**")

    def afficher_section(titre, tests, colonnes):
        st.markdown(f"#### üìå {titre}")
        if tests:
            df = pd.DataFrame(tests)
            st.dataframe(df[colonnes], use_container_width=True)
        else:
            st.info(f"Aucun test enregistr√© pour **{titre}**.")

    # R√©sum√© pour chaque test
    afficher_section("üéØ Passe", st.session_state.get("tests_passe", []), ["Pied", "Pression", "Pr√©cision (%)", "Temps moyen (s)"])
    afficher_section("üõû Conduite", st.session_state.get("conduite_tests", []), ["Parcours", "Temps (s)", "Niveau"])
    afficher_section("‚öΩ Remate", st.session_state.get("tests_remate", []), ["Pr√©cision Droit (%)", "Pr√©cision Gauche (%)", "Vitesse Moy. Droit (km/h)", "Vitesse Moy. Gauche (km/h)"])
    afficher_section("üèÉ‚Äç‚ôÇÔ∏è Sprint", st.session_state.get("sprint_tests", []), ["type", "temps", "niveau", "note"])
    afficher_section("üöÄ Agilit√©", st.session_state.get("agility_tests", []), ["Pression", "Temps moyen", "Touches"])
    afficher_section("üí™ Masse musculaire", st.session_state.get("muscle_tests", []), ["poids", "masse_musculaire", "niveau", "note"])

    st.markdown("### üß† Synth√®se IA")
    prompt_global = f"""
Tu es un analyste de performance pour jeunes joueurs de football.

Fais un r√©sum√© global de la performance de {nom}, {age} ans, √† partir de ses tests techniques et physiques dans les domaines suivants : passe, conduite, remate, sprint, agilit√©, masse musculaire.

Donne :
1. Une √©valuation globale (Excellent / Bon / Moyen / √Ä am√©liorer)
2. Les points forts
3. Les axes de progression
4. Un plan d‚Äôaction g√©n√©ral sur 4 semaines

Sois concis, professionnel et motivant.
"""
    if st.button("üß† G√©n√©rer l'analyse globale IA"):
        try:
            response = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "Tu es un pr√©parateur de football jeunesse."},
                    {"role": "user", "content": prompt_global}
                ],
                temperature=0.7,
                max_tokens=600
            )
            st.success("‚úÖ Rapport g√©n√©r√© avec succ√®s.")
            st.markdown(response.choices[0].message.content)
        except Exception as e:
            st.error(f"‚ùå Erreur : {str(e)}")
